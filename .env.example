# ============================================================================
# Environment Configuration
# ============================================================================
# This file serves as a template for required environment variables.
#
# IMPORTANT SECURITY NOTES:
# - This file is tracked by Git and should contain ONLY example values
# - NEVER commit real secrets, API keys, or credentials to this file
# - For local development, copy this file to .env.local and add real values
# - For production, configure environment variables in your hosting platform
#
# Files ending with .local are automatically ignored by Git (.env.local, etc.)
# ============================================================================

# ============================================================================
# APPLICATION SETTINGS
# ============================================================================

# Application URL (used for OAuth callbacks, webhooks, absolute URLs, etc.)
# Development: http://localhost:3000
# Production: https://yourdomain.com
NEXT_PUBLIC_APP_URL=http://localhost:3000

# Node Environment (automatically set by Next.js, but can be overridden)
# Options: development | production | test
NODE_ENV=development

# Disable Next.js telemetry for privacy (optional)
# Set to 1 to disable anonymous telemetry data collection
NEXT_TELEMETRY_DISABLED=1

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# Database connection string
# For local development with PGLite (included, no Docker required):
DATABASE_URL=postgresql://postgres:postgres@localhost:5433/local.db

# Production examples:
# - PostgreSQL: postgresql://user:password@host:5432/dbname
# - Vercel Postgres: postgres://user:password@host/vercel_db
# - Neon: postgresql://user:password@host/neon_db
# - Supabase: postgresql://user:password@host:5432/postgres
#
# Recommended: https://www.prisma.io/?via=nextjsboilerplate

# ============================================================================
# AUTHENTICATION - NextAuth.js
# ============================================================================

# Required: Secret key for JWT encryption and session tokens
# Generate with: openssl rand -base64 32
# Or online: https://generate-secret.vercel.app/32
AUTH_SECRET=your_auth_secret_here_minimum_32_characters

# GitHub OAuth Provider
# Get credentials: https://github.com/settings/developers
# Callback URL: ${NEXT_PUBLIC_APP_URL}/api/auth/callback/github
GITHUB_CLIENT_ID=your_github_client_id
GITHUB_CLIENT_SECRET=your_github_client_secret

# Google OAuth Provider
# Get credentials: https://console.cloud.google.com/apis/credentials
# Callback URL: ${NEXT_PUBLIC_APP_URL}/api/auth/callback/google
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret

# ============================================================================
# PAYMENT PROCESSING - Stripe
# ============================================================================

# Public Key (safe to expose in client-side code)
# Get from: https://dashboard.stripe.com/apikeys
# Use test keys (pk_test_) for development, live keys (pk_live_) for production
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_your_publishable_key

# Secret Key (server-side only - NEVER expose to client)
# Store in .env.local or hosting platform secrets
STRIPE_SECRET_KEY=sk_test_your_secret_key

# Webhook Secret (for verifying Stripe webhook signatures)
# Get from: https://dashboard.stripe.com/webhooks
# Create endpoint: ${NEXT_PUBLIC_APP_URL}/api/stripe/webhook
# Optional for local development, required for production
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret

# Note: For local webhook testing, use Stripe CLI:
# stripe listen --forward-to localhost:3000/api/stripe/webhook

# ============================================================================
# SECURITY - Arcjet
# ============================================================================

# Arcjet API Key for bot protection, rate limiting, and security
# Get your key: https://launch.arcjet.com/Q6eLbRE
# Format: ajkey_*
# Optional - application will run without it, but security features disabled
ARCJET_KEY=ajkey_your_arcjet_key_here

# ============================================================================
# ANALYTICS & MONITORING - PostHog
# ============================================================================

# PostHog Project API Key (public, safe for client-side)
# Get from: https://app.posthog.com/project/settings
# Optional - leave empty to disable analytics
NEXT_PUBLIC_POSTHOG_KEY=

# PostHog Instance Host
# US Cloud: https://us.i.posthog.com
# EU Cloud: https://eu.i.posthog.com
# Self-hosted: https://your-instance.com
NEXT_PUBLIC_POSTHOG_HOST=https://us.i.posthog.com

# ============================================================================
# LOGGING - Better Stack (formerly Logtail)
# ============================================================================

# Better Stack source token for centralized logging
# Get from: https://logs.betterstack.com/team/sources
# Optional - leave empty to disable remote logging
NEXT_PUBLIC_BETTER_STACK_SOURCE_TOKEN=

# Better Stack ingesting endpoint
# Default: https://in.logs.betterstack.com
NEXT_PUBLIC_BETTER_STACK_INGESTING_HOST=https://in.logs.betterstack.com

# ============================================================================
# STORAGE - Cloudflare R2 (S3-Compatible)
# ============================================================================

# S3-Compatible Storage Configuration
# Supports: Cloudflare R2, AWS S3, MinIO, and other S3-compatible services
# Recommended: Cloudflare R2 for cost-effective storage with zero egress fees

# Required: Bucket name
STORAGE_BUCKET_NAME=your-bucket-name

# Required: Access credentials
# For Cloudflare R2: Generate in Cloudflare dashboard > R2 > Manage R2 API Tokens
STORAGE_ACCESS_KEY_ID=your-access-key-id
STORAGE_SECRET_ACCESS_KEY=your-secret-access-key

# Required: Public URL for accessing stored files
# For Cloudflare R2 with custom domain: https://cdn.yourdomain.com
# For Cloudflare R2 public bucket: https://pub-xxxxxxxxxxxx.r2.dev
STORAGE_PUBLIC_BASE_URL=https://your-public-url.com

# Optional: Storage region
# For Cloudflare R2: auto (default)
# For AWS S3: us-east-1, eu-west-1, etc.
STORAGE_REGION=auto

# Optional: Custom endpoint URL
# For Cloudflare R2: https://<account-id>.r2.cloudflarestorage.com
# For AWS S3: Leave empty to use default (https://s3.<region>.amazonaws.com)
# Get your account ID from: Cloudflare dashboard > R2 > Overview
STORAGE_ENDPOINT=https://your-account-id.r2.cloudflarestorage.com

# Optional: Force path-style URLs (required for Cloudflare R2)
# Cloudflare R2: true (required)
# AWS S3: false (default)
STORAGE_FORCE_PATH_STYLE=true

# Optional: Session token for temporary AWS credentials
# Only needed if using AWS STS temporary credentials
# STORAGE_SESSION_TOKEN=

# Cloudflare R2 Setup Instructions:
# 1. Go to Cloudflare dashboard > R2
# 2. Create a new R2 bucket
# 3. Go to "Manage R2 API Tokens" and create a new API token
# 4. Set STORAGE_BUCKET_NAME to your bucket name
# 5. Set STORAGE_ACCESS_KEY_ID and STORAGE_SECRET_ACCESS_KEY from the token
# 6. Set STORAGE_ENDPOINT to https://<account-id>.r2.cloudflarestorage.com
# 7. Set STORAGE_FORCE_PATH_STYLE to true
# 8. Set STORAGE_REGION to auto
# 9. For public access, enable "Public access" on your bucket and set
#    STORAGE_PUBLIC_BASE_URL to the provided public URL (https://pub-xxx.r2.dev)
# 10. (Optional) Configure a custom domain in Cloudflare for better URLs
#
# Documentation: https://developers.cloudflare.com/r2/

# ============================================================================
# QUICK START GUIDE
# ============================================================================
#
# 1. Copy this file: cp .env.example .env.local
# 2. Update values in .env.local with your actual credentials
# 3. Required for basic setup:
#    - DATABASE_URL (use default for local PGLite)
#    - AUTH_SECRET (generate new secret)
#    - At least one OAuth provider (GitHub or Google)
#    - STRIPE_PUBLISHABLE_KEY and STRIPE_SECRET_KEY
#
# 4. Optional but recommended for full functionality:
#    - ARCJET_KEY (for security features)
#    - PostHog credentials (for analytics)
#    - Better Stack credentials (for logging)
#
# 5. Run: npm run dev
#
# For detailed setup instructions, visit the documentation.
# ============================================================================
